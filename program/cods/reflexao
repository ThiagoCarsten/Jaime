#!/usr/bin/env pybricks-micropython
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import ColorSensor
from pybricks.parameters import Port, Button
from pybricks.tools import wait

# ========== CONFIGURAÇÃO INICIAL ==========
ev3 = EV3Brick()
sensor = ColorSensor(Port.S1)  # Conecte na porta S1

# ========== CALIBRAÇÃO ==========
def calibrar_sensor():
    ev3.screen.clear()
    ev3.speaker.beep()
    
    # Calibração do preto
    ev3.screen.print("Aponte para o PRETO")
    ev3.screen.print("e pressione ENTER")
    while not Button.CENTER in ev3.buttons.pressed():
        wait(10)
    preto = sensor.reflection()
    wait(500)
    ev3.speaker.beep()
    
    # Calibração do branco
    ev3.screen.print("Aponte para o BRANCO")
    ev3.screen.print("e pressione ENTER")
    while not Button.CENTER in ev3.buttons.pressed():
        wait(10)
    branco = sensor.reflection()
    wait(500)
    
    return preto, branco

# ========== PROGRAMA PRINCIPAL ==========
def main():
    # Calibração inicial
    preto, branco = calibrar_sensor()
    ev3.screen.clear()
    ev3.speaker.beep(784, 200)  # Nota musical de confirmação
    
    while True:
        # Leitura e normalização do sensor (0-100%)
        bruto = sensor.reflection()
        porcentagem = int((bruto - preto) / (branco - preto) * 100)
        porcentagem = max(0, min(100, porcentagem))  # Limita entre 0-100%
        
        # Exibição gráfica
        ev3.screen.clear()
        ev3.screen.print("Reflexao: {}%".format(porcentagem))
        
        # Barra de progresso visual
        largura_barra = int(porcentagem * 0.9)  # 90% da largura da tela
        ev3.screen.draw_box(5, 40, largura_barra, 50)
        
        # Feedback sonoro para extremos
        if porcentagem < 10:
            ev3.speaker.beep(200, 50)
        elif porcentagem > 90:
            ev3.speaker.beep(800, 50)
            
        wait(100)  # Atualização a cada 0.1s

# Executa o programa
if __name__ == "__main__":
    main()